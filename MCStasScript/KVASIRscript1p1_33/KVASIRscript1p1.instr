/********************************************************************************
* 
* McStas, neutron ray-tracing package
*         Copyright (C) 1997-2008, All rights reserved
*         Risoe National Laboratory, Roskilde, Denmark
*         Institut Laue Langevin, Grenoble, France
* 
* This file was written by McStasScript, which is a 
* python based McStas instrument generator written by 
* Mads Bertelsen in 2019 while employed at the 
* European Spallation Source Data Management and 
* Software Centre
* 
* Instrument KVASIRscript1p1
* 
* %Identification
* Written by: Python McStas Instrument Generator
* Date: 10:00:12 on September 16, 2024
* Origin: ESS DMSC
* %INSTRUMENT_SITE: Generated_instruments
* 
* 
* %Parameters
* 
* %End 
********************************************************************************/

DEFINE INSTRUMENT KVASIRscript1p1 (
Ef = 1.82, // Ef [meV]
d_AD = 2, // Distance from analyser to detector[m]
d_SA = 3 // Distance from sample to analyser[m]
)

DECLARE 
%{
double D_lambda = 0.1;
double width = 0.001;
double u = 0.0001;
double d_PG = 3.355;
double lambda_f;
double tA;
double tS;
double x_tS_d;
double x_tS;
double y_tS_d;
double y_tS;
double z_tS_d;
double z_tS;
double d_SDz;
double h_D;
double tRDx;
double tRDy;
double d_SD;
%}

INITIALIZE 
%{
// Start of initialize for generated KVASIRscript1p1
lambda_f=1/(0.11056*sqrt(Ef));
tA=asin(lambda_f/(2*d_PG))*RAD2DEG;
tS=20;
x_tS_d = 2/3*d_SA*sin(tS*DEG2RAD); 
x_tS = x_tS_d/d_SA*RAD2DEG;
y_tS_d = sqrt(d_SA*d_SA*sin(tS*DEG2RAD)*sin(tS*DEG2RAD) - x_tS_d*x_tS_d);
y_tS = y_tS_d/d_SA*RAD2DEG;
z_tS_d = d_SA*cos(tS*DEG2RAD) ;
z_tS = z_tS_d/d_SA*RAD2DEG;
d_SDz=d_SA+d_AD*cos(2*tA*DEG2RAD);
h_D=d_AD*sin(2*tA*DEG2RAD);
tRDx=-RAD2DEG*atan(d_AD/d_SDz*sin(2*tA*DEG2RAD));
tRDy=360*0.0125/(2*d_SDz*3.142);
d_SD=d_AD*sin(2*tA*DEG2RAD)/sin(tRDx*DEG2RAD);
%}

TRACE 
COMPONENT origin = Progress_bar()
AT (0,0,0) ABSOLUTE

COMPONENT arm_bragg = Arm()
AT (0,0,0) RELATIVE PREVIOUS
ROTATED (x_tS-tS,y_tS,0) RELATIVE PREVIOUS

COMPONENT source = Source_Maxwell_3(
 yheight = width, xwidth = width,
 Lmin = lambda_f-D_lambda/2, Lmax = lambda_f+D_lambda/2,
 dist = d_SA, focus_xw = width,
 focus_yh = width, T1 = 300,
 T2 = 300, T3 = 300,
 I1 = 1E+15, I2 = 1E+15,
 I3 = 1E+15)
AT (0,0,0) RELATIVE origin
ROTATED (0,0,0) RELATIVE origin

COMPONENT PSD_monitor_analyser = PSD_monitor(
 nx = 40, ny = 40,
 filename = "PSD_analyzer.dat", xwidth = width*2,
 yheight = width*2, restore_neutron = 1)
AT (0,0,d_SA-u) RELATIVE PREVIOUS

COMPONENT Analyzer = Monochromator_flat(
 zwidth = width*2, yheight = width*2,
 mosaich = 37, mosaicv = 37,
 r0 = 0.8, Q = 1.87278,
 DM = d_PG)
AT (0,0,u) RELATIVE PREVIOUS
ROTATED (90-tA,90,0) RELATIVE PREVIOUS

COMPONENT arm_detector_0 = Arm()
AT (0,0,0) RELATIVE source
ROTATED (0,tRDy*0.0,0) RELATIVE source

COMPONENT det_He3_0 = Monitor_nD(
 xwidth = 0.0127, yheight = 0.1,
 options = "cylinder, energy limits=[0 10], bins=1000, y limits=[0,1], bins=1000", filename = "Detector_0.dat")
AT (0,h_D,d_SDz) RELATIVE PREVIOUS
ROTATED (0,tRDy*0.0+y_tS,0) ABSOLUTE

COMPONENT arm_detector_m1 = Arm()
AT (0,0,0) RELATIVE source
ROTATED (0,-tRDy*1.0,0) RELATIVE source

COMPONENT det_He3_m1 = Monitor_nD(
 xwidth = 0.0127, yheight = 0.1,
 options = "cylinder, energy, limits=[0 10], bins=1000, y, limits=[0,1], bins=1000", filename = "Detector_m0.dat")
AT (0,h_D,d_SDz) RELATIVE PREVIOUS
ROTATED (0,-tRDy*1.0+y_tS,0) ABSOLUTE

COMPONENT arm_detector_1 = Arm()
AT (0,0,0) RELATIVE source
ROTATED (0,tRDy*1.0,0) RELATIVE source

COMPONENT det_He3_1 = Monitor_nD(
 xwidth = 0.0127, yheight = 0.1,
 options = "cylinder, energy limits=[0 10], bins=1000, y limits=[0,1], bins=1000", filename = "Detector_1.dat")
AT (0,h_D,d_SDz) RELATIVE PREVIOUS
ROTATED (0,tRDy*1.0+y_tS,0) ABSOLUTE

COMPONENT arm_detector_m2 = Arm()
AT (0,0,0) RELATIVE source
ROTATED (0,-tRDy*2.0,0) RELATIVE source

COMPONENT det_He3_m2 = Monitor_nD(
 xwidth = 0.0127, yheight = 0.1,
 options = "cylinder, energy, limits=[0 10], bins=1000, y, limits=[0,1], bins=1000", filename = "Detector_m1.dat")
AT (0,h_D,d_SDz) RELATIVE PREVIOUS
ROTATED (0,-tRDy*2.0+y_tS,0) ABSOLUTE

COMPONENT arm_detector_2 = Arm()
AT (0,0,0) RELATIVE source
ROTATED (0,tRDy*2.0,0) RELATIVE source

COMPONENT det_He3_2 = Monitor_nD(
 xwidth = 0.0127, yheight = 0.1,
 options = "cylinder, energy limits=[0 10], bins=1000, y limits=[0,1], bins=1000", filename = "Detector_2.dat")
AT (0,h_D,d_SDz) RELATIVE PREVIOUS
ROTATED (0,tRDy*2.0+y_tS,0) ABSOLUTE

FINALLY 
%{
// Start of finally for generated KVASIRscript1p1
%}

END
